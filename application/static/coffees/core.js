// Generated by CoffeeScript 1.5.0
(function() {
  var KNotification, ViewEventChat, ViewEvents, ViewEventsPost, core, delay, user_agent;

  delay = function(ms, func) {
    return setTimeout(func, ms);
  };

  KNotification = {
    width: 250,
    height: 75,
    prefix: 'n_',
    increment_id: 0,
    queue: [],
    pop: function(arg) {
      /*
      pop notification box.
      */

      var box, nid, top, _ref, _ref1, _ref2;
      if ((_ref = arg.expire) == null) {
        arg.expire = 5000;
      }
      if ((_ref1 = arg.title) == null) {
        arg.title = '';
      }
      if ((_ref2 = arg.message) == null) {
        arg.message = '';
      }
      nid = this.prefix + ++this.increment_id;
      box = $('<div id="' + nid + '" class="knotification"><div class="ntitle">' + arg.title + '</div><div class="nmessage">' + arg.message + '</div></div>');
      top = this.queue.length * this.height;
      this.queue.push(nid);
      $('body').append(box);
      $('#' + nid).css({
        right: -this.width,
        top: top
      });
      $('#' + nid).animate({
        right: 0
      }, 400, 'easeOutExpo', delay(arg.expire, function() {
        return KNotification.hide(nid);
      }));
      return nid;
    },
    hide: function(nid) {
      /*
      hide notification box.
      */

      var remove_top;
      this.queue = this.queue.filter(function(x) {
        return x !== nid;
      });
      remove_top = parseInt($('#' + nid).css('top'));
      $('#' + nid).animate({
        right: -this.width
      }, 400, 'easeInExpo', function() {
        var $box, id, new_top, top, _i, _len, _ref;
        _ref = KNotification.queue;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          id = _ref[_i];
          $box = $('#' + id);
          top = parseInt($box.css('top'));
          if (top > remove_top) {
            new_top = $box.attr('top') ? parseInt($box.attr('top' - KNotification.height)) : top - KNotification.height;
            $box.attr({
              'top': new_top
            });
            $box.dequeue();
            $box.animate({
              top: new_top
            }, 400, 'easeOutExpo');
          }
        }
        return $(this).remove();
      });
    }
  };

  window.KNotification = KNotification;

  core = {
    text_loading: 'Loading...',
    is_safari: false,
    socket: null,
    pop_state: function(state) {
      /*
      pop state ←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙
      */
      if (state) {
        $('.modal.in').modal('hide');
        this.miko(state, false);
      }
    },
    miko: function(state, push) {
      /*
      みこ ←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙
      */

      var before_index;
      before_index = $('#nav_bar li.active').index();
      $.ajax({
        url: state.href,
        type: 'get',
        async: !(core.is_safari && state.is_pop),
        data: state.data,
        cache: false,
        beforeSend: function(xhr) {
          var index;
          index = state.href === '/' ? 0 : $('#nav_bar li a[href*="' + state.href + '"]').parent().index();
          core.nav_select(index);
          xhr.setRequestHeader('X-Miko', 'miko');
          return core.loading_on(core.text_loading);
        },
        error: function(xhr) {
          core.loading_off();
          core.error_message();
          return core.nav_select(before_index);
        },
        success: function(result) {
          var content, miko, title;
          core.loading_off();
          if (push) {
            if (state.href !== location.pathname || location.href.indexOf('?') >= 0) {
              state.nav_select_index = $('#nav_bar li.active').index();
              history.pushState(state, document.title, state.href);
            }
            $('html, body').animate({
              scrollTop: 0
            }, 500, 'easeOutExpo');
          }
          miko = result.match(/<!miko>/);
          if (!miko) {
            location.reload();
            return;
          }
          title = result.match(/<title>(.*)<\/title>/);
          result = result.replace(title[0], '');
          document.title = title[1];
          content = result.match(/\s@([#.]?\w+)/);
          if (content) {
            $(content[1]).html(result.replace(content[0], ''));
          }
          return core.after_page_loaded();
        }
      });
      return false;
    },
    setup_link: function() {
      /*
      setup hyper link, form to ajax and push history.
      */
      $(document).on('click', 'a:not([href*="#"])', function(e) {
        var href;
        if (e.metaKey) {
          return;
        }
        if ($(this).closest('.active').length > 0 && $(this).closest('.menu').length > 0) {
          return false;
        }
        href = $(this).attr('href');
        if (href && !$(this).attr('target')) {
          core.miko({
            href: href
          }, true);
          return false;
        }
      });
      $(document).on('submit', 'form[method=get]:not([action*="#"])', function() {
        var href;
        href = $(this).attr('action' + '?' + $(this).serialize());
        core.miko({
          href: href
        }, true);
        return false;
      });
      return $(document).on('submit', 'form[method=post]:not([action*="#"])', function() {
        var href;
        if (core.validation($(this))) {
          href = $(this).attr('action');
          core.miko({
            href: href,
            data: $(this).serialize()
          }, false);
        }
        return false;
      });
    },
    error_message: function() {
      /*
      pop error message.
      */
      return KNotification.pop({
        title: 'Failed',
        message: 'Loading failed, please try again later.'
      });
    },
    validation: function($form) {
      /*
      validation ←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙
      */

      var success;
      success = true;
      $form.find('input, textarea').each(function() {
        var validation;
        validation = $(this).attr('validation');
        if (validation && validation.length > 0) {
          if ($(this).val().match(validation)) {
            $(this).closest('.control-group').removeClass('error');
            return $(this).parent().find('.error_msg').remove();
          } else {
            $(this).closest('.control-group').addClass('error');
            $(this).parent().find('.error_msg').remove();
            if ($(this).attr('msg')) {
              $(this).parent().append($('<label for="' + $(this).attr('id') + '" class="error_msg help-inline">' + $(this).attr('msg') + '</label>'));
            }
            return success = false;
          }
        }
      });
      return success;
    },
    setup_datetime: function() {
      /*
      datetime ←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙
      */
      return $('.datetime').each(function() {
        var date;
        try {
          date = new Date($(this).attr('datetime'));
          return $(this).html(date.toFormat($(this).attr('format')));
        } catch (_error) {}
      });
    },
    setup_focus: function() {
      /*
      focus ←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙
      */
      return $('.focus').select();
    },
    setup_tooltip: function() {
      /*
      tool tip ←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙
      */
      return $('[rel="tooltip"]').tooltip();
    },
    setup_enter_submit: function() {
      /*
      .enter-submit.keypress() Ctrl + Enter then submit the form
      */
      return $(document).on('keypress', '.enter-submit', function(e) {
        if (e.keyCode === 13 && e.ctrlKey) {
          $(this).closest('form').submit();
          return false;
        }
      });
    },
    loading_on: function() {
      /*
      loading ←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙
      */
      return $('body, a, .table-pointer tbody tr').css({
        cursor: 'wait'
      });
    },
    loading_off: function() {
      $('body').css({
        cursor: 'default'
      });
      return $('a, .table-pointer tbody tr').css({
        cursor: 'pointer'
      });
    },
    nav_select: function(index) {
      /*
      nav ←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙
      */
      if (index >= 0 && !$($('#nav_bar li')[index]).hasClass('active')) {
        $('#nav_bar li').removeClass('active');
        return $($('#nav_bar li')[index]).addClass('active');
      }
    },
    setup_nav: function() {
      var index, match;
      match = location.href.match(/\w(\/\w*)/);
      if (match) {
        index = match[1] === '/' ? 0 : $('#nav_bar li a[href*="' + match[1] + '"]').parent().index();
        $('#nav_bar li').removeClass('active');
        return $($('#nav_bar li')[index]).addClass('active');
      }
    },
    after_page_loaded: function() {
      /*
      events of views ←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙
      */
      core.setup_datetime();
      core.setup_chat();
      core.setup_focus();
      return core.setup_tooltip();
    },
    setup_chat: function() {
      /*
      setup_chat ←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙←↖↑↗→↘↓↙
      */

      var chat_token;
      if ($('#chat').length > 0) {
        chat_token = window.sessionStorage['chat_token'];
        return $.ajax({
          type: 'post',
          url: '/chat/setup',
          dataType: 'json',
          cache: false,
          data: {
            chat_token: chat_token
          },
          success: function(result) {
            var channel;
            window.sessionStorage['chat_token'] = result.chat_token;
            $('#chat_name').val(result.name);
            channel = new goog.appengine.Channel(result.channel_token);
            core.socket = channel.open();
            core.socket.onmessage = core.chat_on_message;
            return core.socket.onerror = core.chat_on_error;
          }
        });
      } else if (core.socket) {
        return core.socket.close();
      }
    },
    chat_on_message: function(msg) {
      msg = JSON.parse(msg.data);
      if (msg.rename) {
        $('#chat_board').append(msg.rename.old_name + ' rename to ' + msg.rename.new_name + '\n');
        $('#chat_name').val(msg.rename.new_name);
      }
      if (msg.message) {
        $('#chat_board').append(msg.name + ': ' + msg.message + '\n');
      }
      return $('#chat_board').animate({
        scrollTop: $('#chat_board').prop('scrollHeight')
      }, 500, 'easeOutExpo');
    },
    chat_on_error: function() {
      window.sessionStorage.removeItem('chat_token');
      return this.setup_chat();
    }
  };

  window.core = core;

  user_agent = navigator.userAgent.toLowerCase();

  core.is_safari = user_agent.indexOf('safari') !== -1 && user_agent.indexOf('chrome') === -1;

  ViewEventsPost = (function() {

    function ViewEventsPost() {
      this.create_post();
      this.delete_post();
      return this;
    }

    ViewEventsPost.prototype.create_post = function() {
      /*
      create a post
      :param url: $(@).attr('action')
      :param data: $(@).serialize()
      */
      return $(document).on('submit', 'form#form_create_post', function() {
        if (!core.validation($(this))) {
          return false;
        }
        $.ajax({
          type: 'post',
          url: $(this).attr('action'),
          data: $(this).serialize(),
          dataType: 'json',
          cache: false,
          beforeSend: function() {
            return core.loading_on(core.text_loading);
          },
          error: function() {
            core.loading_off();
            return core.error_message();
          },
          success: function(result) {
            core.loading_off();
            if (result.success) {
              return core.miko({
                href: location.href
              }, false);
            } else {
              return KNotification.pop({
                title: 'Failed',
                message: 'Please check again.'
              });
            }
          }
        });
        return false;
      });
    };

    ViewEventsPost.prototype.delete_post = function() {
      /*
      delete the post
      :param url: $(@).attr('href')
      */
      return $(document).on('click', 'a.delete_post', function() {
        $.ajax({
          type: 'delete',
          url: $(this).attr('href'),
          dataType: 'json',
          cache: false,
          beforeSend: function() {
            return core.loading_on(core.text_loading);
          },
          error: function() {
            core.loading_off();
            return core.error_message();
          },
          success: function(result) {
            core.loading_off();
            if (result.success) {
              return core.miko({
                href: location.href
              }, false);
            } else {
              return KNotification.pop({
                title: 'Failed!',
                message: 'You could not delete this post.'
              });
            }
          }
        });
        return false;
      });
    };

    return ViewEventsPost;

  })();

  ViewEventChat = (function() {

    function ViewEventChat() {
      this.send_msg();
      return this;
    }

    ViewEventChat.prototype.send_msg = function() {
      return $(document).on('submit', 'form#form_chat_input', function() {
        var chat_token;
        chat_token = window.sessionStorage['chat_token'];
        $.ajax({
          type: 'post',
          url: '/chat/send_msg',
          dataType: 'json',
          cache: false,
          data: {
            token: chat_token,
            msg: $('#chat_msg').val(),
            name: $('#chat_name').val()
          },
          success: function(result) {
            if (result.success) {
              return $('#chat_msg').val('');
            }
          }
        });
        return false;
      });
    };

    return ViewEventChat;

  })();

  ViewEvents = (function() {

    function ViewEvents() {
      new ViewEventsPost();
      new ViewEventChat();
      return this;
    }

    return ViewEvents;

  })();

  $(function() {
    core.setup_nav();
    core.setup_link();
    core.setup_enter_submit();
    window.onpopstate = function(e) {
      return core.pop_state(e.state);
    };
    new ViewEvents();
    return core.after_page_loaded();
  });

}).call(this);
